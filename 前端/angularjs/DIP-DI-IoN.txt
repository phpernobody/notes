1、依赖倒置原则（DIP）:(通俗的讲，就是高层模块定义接口，低层模块负责实现。)
	高层模块不应依赖于低层模块，两者应该依赖于抽象。
	抽象不不应该依赖于实现，实现应该依赖于抽象。


2、几个概念
	依赖无倒置：
		底层模块定义接口，高层模块负责实现；
	依赖倒置：
		高层模块定义接口，底层模块负责实现；
	控制反转：
		一种设计原则，它为相互依赖的组件提供抽象，将依赖（低层模块）对象的获得交给第三方（系统）来控制，即依赖对象不在被依赖模块的类中直接通过new来获取。
	依赖注入：底层模块创建抽象接口传递给高层模块，高层模块根据接口生成新的高层，从而为底层模块提供依赖（个人理解）。



